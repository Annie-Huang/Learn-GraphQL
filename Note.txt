Learn GraphQL In 40 Minutes (https://www.youtube.com/watch?v=ZQL7tL2S0oQ)           << code

https://github.com/WebDevSimplified/Learn-GraphQL
https://github.com/Annie-Huang/Learn-GraphQL

Other tutorial:
1.
GraphQL Client Tutorial With Fetch https://www.youtube.com/watch?v=0ZJI4cBS4JM      << code
(https://github.com/WebDevSimplified/GraphQL-Client-Fetch)
2.
What Is GraphQL? REST vs. GraphQL https://www.youtube.com/watch?v=yWzKJPw_VzM
3.
GraphQL Explained in 100 Seconds (Fireship)
4.
3 Things I wish I knew when starting with GraphQL ft Kitze | Prismic https://www.youtube.com/watch?v=0yr25jzVLMg
5.
GraphQL, tRPC, REST and more - Pick Your Poison (Theo - t3.gg) << This contains really good diagram for graphQL
6.
tRPC - GraphQL KILLER??! (Theo - t3.gg)
7.
GraphQL vs REST: what you need to know (Kodaps Academy)
8.
GraphQL Crash Course With Full Stack MERN Project (Traversy Media)

-----------------------------------------------------------------------

When you are using GraphQL in the client side, you can see all the method is 'POST', even though we just GET the information.
All http method has to be a "POST", which make GraphicQL hard to cache and potentially reduce performance.

function queryFetch(query, variables) {
  return fetch('https://countries.trevorblades.com/', {
    method: 'POST',
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      query: query,
      variables: variables
    })
  }).then(res => res.json())
}

-----------------------------------------------------------------------
Other tips:

Use small query and use as much fragment as you can
It seems in (GraphQL, tRPC, REST and more - Pick Your Poison), it is said everything in graphyQL is supposed to be public, not provision. e.g. not login user, logout user to have the right to access certain things....


GraphQL's 4 advantages:
- Navigate a relational graph
- Client-side data shaping
- Introspection / auto documentation
- Types

GraphQL's weakness:
- Difficult optimisation
- N+1 problem e.g run all the queries in a single request. When searching deep into the graph, the complexity grows exponentially. It would bring down the database to its knees
  It's the frontend dev's responsibility to think about not overloading the database.


-----------------------------------------------------------------------

PS C:\react\Learn-GraphQL> npm i express express-graphql graphql
PS C:\react\Learn-GraphQL> npm i --save-dev nodemon

https://stackoverflow.com/questions/65517979/expressgraphql-is-not-a-function

http://localhost:5000/
http://localhost:5000/graphql?

--------------------------------------------------------------

# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that start
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)
#
#     Merge Query:  Shift-Ctrl-M (or press the merge button above)
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

------------------------

GraphQL be default use query. If you want it to do mutation, you will need to add the mutation keyword
Also mutation has to use double quote to pass into new value, because GraphQL is like json, single quote is invalid.

Query to run:
1.
{books {
  id,
  name
}}

2. How to get the actual author from the book:
{books {
  id,
  author {
    name
  }
}}

3.
{authors {
  name
}}

4. How to get the a list of books written by the author
{authors {
  name
  books {
    name
  }
}}

5. Get book with id 1:
{book(id: 1) {
  name
}}

(And you can find the author info from the particular book id as well:)
{book(id: 1) {
  name
  author {
    name
  }
}}

6. Get author with id 2:
{author(id: 2) {
  name
}}

(And you can find the books info from the particular author id as well:)
{author(id: 2) {
  name
  books {
    name
  }
}}

7. Add a new book into books array:
mutation {
  addBook(name: "New Name", authorId: 1) {
    id
    name
  }
}

(and verified it's added:)
{books {
  id
  name
}}

8. Add a new author into the authors array:
mutation {
  addAuthor(name: "New Author") {
    id
    name
  }
}

(and verified it's added, and query the books as well:)
{authors {
  id
  name
  books {
    name
  }
}}

---------------------
For GraphQL Client Tutorial With Fetch

query {
  continents {
    code
    name
  }
}

query {
  continent(code: "AF") {
    countries {
      name
      code
    }
  }
}

query getCountries($code: ID!){
  continent(code: $code) {
    countries {
      name
    }
  }
}
then in Query Variables at the bottom, put {"code": "AF"} and run
